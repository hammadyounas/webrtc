[{"/client-projects/webrtc/src/index.js":"1","/client-projects/webrtc/src/reportWebVitals.js":"2","/client-projects/webrtc/src/App.js":"3","/client-projects/webrtc/src/webSocket.js":"4"},{"size":500,"mtime":1612341439839,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1612341439839,"results":"7","hashOfConfig":"6"},{"size":3417,"mtime":1613058471892,"results":"8","hashOfConfig":"6"},{"size":377,"mtime":1613058462132,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"tbxqn3",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/client-projects/webrtc/src/index.js",[],["19","20"],"/client-projects/webrtc/src/reportWebVitals.js",[],"/client-projects/webrtc/src/App.js",["21","22","23","24"],"/client-projects/webrtc/src/webSocket.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":1,"column":17,"nodeType":"31","messageId":"32","endLine":1,"endColumn":28},{"ruleId":"29","severity":1,"message":"33","line":11,"column":10,"nodeType":"31","messageId":"32","endLine":11,"endColumn":19},{"ruleId":"29","severity":1,"message":"34","line":11,"column":20,"nodeType":"31","messageId":"32","endLine":11,"endColumn":32},{"ruleId":"35","severity":1,"message":"36","line":37,"column":11,"nodeType":"37","endLine":37,"endColumn":43},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'textValue' is assigned a value but never used.","'setTextValue' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'pc' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","no-global-assign","no-unsafe-negation"]